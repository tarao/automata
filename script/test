#! /usr/bin/env ruby
# -*- coding: utf-8 -*-

oldwd = Dir.pwd
Dir.chdir(File.dirname(File.expand_path($0)))
$:.unshift('./lib')

require 'time'

require 'app'
require 'permission'
require 'log'

err = {
  :build => '自動コンパイルチェックに失敗しました; 提出要件を満たしているか確認して下さい',
  :build_fatal => '自動コンパイルチェックに失敗しました; TAに問い合わせて下さい',
}

args = $*.dup
$argv = {}; arg=nil
$argv[:help] = %w'-h --help'.any?{|x| args.delete(x)}
$argv[:id] = args.reject!{|x|x=~/^--id=(.*)$/&&arg=$1} && arg || $argv[:id]

report_id = args.shift
user = args.shift

if $argv[:help] || !report_id || !user
  print <<"EOM"
Usage: #{$0} [-h] [--id=YYYY-MM-DDThh:mm:ss+zzzz] report-id user
EOM
  exit
end

dir = {}
dir[:user]   = App::KADAI + report_id + user
dir[:test]   = dir[:user] + 'test'

# sudo su www-data -c "command args..."
Dir.chdir(oldwd){ Permission.ensure_writable(dir[:user].to_s) }

log_file = dir[:user] + App::FILES[:log]
log = if $argv[:id]
        Log.new(log_file, true).retrieve(:data, $argv[:id])
      else
        Log.new(log_file, true).latest(:data)
      end
time = log['id']

cmd = {}

# ../test/build.rb report_id user post
cmd[:build] = "#{App::FILES[:build]} '#{report_id}' '#{user}' '#{time}'"
cmd[:build] = "#{cmd[:build]} > /dev/null 2>#{dir[:user] + 'build_fatal.log'}"

# ../test/test.rb report_id user post
cmd[:test] = "#{App::FILES[:sandbox]} '#{report_id}' '#{user}' '#{time}'"
cmd[:test] = "#{cmd[:test]} > /dev/null 2>&1 &" # do not wait

begin
  build = nil
  IO.popen(cmd[:build], 'w'){|io| log['report'].each{|l| io.puts(l)}}
  if $?.to_i == 0
    Log.new(log_file).transaction do |log|
      build_log = log.retrieve(:build, time)

      hash = {
        'status' => 'build:NG',
        'log'    => {
          'error'   => build_log['detail'],
          'message' => err[:build] }
      }

      if build_log['status'] == 'OK'
        build = true
        hash = { 'status' => 'check', 'log' => { 'build'  => 'OK' } }
      end

      log.write(:data, time, hash.merge('timestamp' => build_log['timestamp']))
    end
  else
    raise RuntimeError, err[:build_fatal]
  end

  unless build
    $stderr.puts('build failed')
    exit(1)
  end

  # invoke tester in a sandbox
  unless system(cmd[:test])
    $stderr.puts('test failed')
    exit(2)
  end

rescue => e
  entry = {
    'status' => 'NG',
    'log' => { 'error' => [ e.to_s, e.backtrace ].join("\n") } }
  Log.new(log_file).write(:data, time, entry)
end
